1. In RStudio, create a new file and install and load required libraries displayed below in example R code. 
2. Get the dataset ready meaning read the .rds, store it in a seurat object, do the normalization and scaling
3. Store the ASSAY of the data in a variable
4. Write assay to csv named "Baron_assay_data.csv" with rownames=FALSE
5. Write the rownames of the assay to a separate csv file named "Baron_assay_rownames.csv"
6. Go to file explorer and inside of the folder where your R file is and drag both csv files written in R project to python coding directory
7. Read the assay data csv using pandas library to store it in a pandas data frame
8. Read the row names csv and store in the pandas data frame index attribute (row names)
(For Step 7 and 8, look at lines 25-30 in main.py)


Example R code of your R file in RStudio using the BARON DATASET
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("ggpubr")) install.packages("ggpubr")
devtools::install_github("RausellLab/CelliD", ref = "legacy")
library(CellID) # Note that the legacy version is called CellID and not CelliD

## Warning: replacing previous import 'data.table::shift' by 'tictoc::shift' when
## loading 'CelliD'
library(tidyverse)
library(ggpubr) #library for plotting

BaronMatrix   <- readRDS(url("https://storage.googleapis.com/cellid-cbl/BaronMatrix.rds"))
BaronMetaData <- readRDS(url("https://storage.googleapis.com/cellid-cbl/BaronMetaData.rds"))

# Optinally filter the Baron dataset to only use genes that are HgProteinCodingGenes
data("HgProteinCodingGenes")
BaronMatrixProt <- BaronMatrix[rownames(BaronMatrix) %in% HgProteinCodingGenes,]
Baron <- CreateSeuratObject(counts = BaronMatrixProt, project = "Baron", min.cells = 5, meta.data = BaronMetaData)
Baron <- NormalizeData(Baron)
Baron <- ScaleData(Baron, features = rownames(Baron))

# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# Getting data that is actually passed into runmca() (the Assay)
# Baron_data is a dgcMatrix or a SPARSE MATRIX
# STORING ASSAY of the data in a variable:
Baron_data_assay = Baron@assays[["RNA"]]@data
# Write the assay to a csv without row names to avoid formatting complications
write.csv(Baron_data_assay, file = "Baron_assay_data.csv", row.names=FALSE)
#store rownames of the assay
Baron_assay_rownames = Baron_data_assay@Dimnames[[1]]
# write row names to a separate csv file
write.csv(Baron_assay_rownames, file = "Baron_assay_rownames.csv", row.names=FALSE)




